apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

kotlin {
  targets {
    final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                          ? presets.iosArm64 : presets.iosX64

    fromPreset(iOSTarget, 'ios') {
      binaries {
        framework('SharedCode')
      }
    }

    fromPreset(presets.jvm, 'android')
  }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

dependencies {
  commonMainImplementation "io.ktor:ktor-client-core:$ktor_version"
  
  androidMainImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
  androidMainImplementation "io.ktor:ktor-client-android:$ktor_version"
  
  iosMainImplementation "io.ktor:ktor-client-ios:$ktor_version"
}

task packForXcode(type: Sync) {
  final File frameworkDir = new File(buildDir, "xcode-frameworks")
  final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
  final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

  inputs.property "mode", mode
  dependsOn framework.linkTask

  from { framework.outputFile.parentFile }
  into frameworkDir

  doLast {
    new File(frameworkDir, 'gradlew').with {
      text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
      setExecutable(true)
    }
  }
}
tasks.build.dependsOn packForXcode
